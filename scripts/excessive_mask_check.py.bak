import sys
import re
import numpy as np
import fits_center
import math
from astropy.io import fits

# check to see if masking is excessive
def check_masking(mask_filename):
    mask_fits = fits.open(mask_filename)
    data = mask_fits[0].data
    
    row_num, x0, y0, ell, pa, sma = np.loadtxt(sys.stdin, unpack=True)

    # check for the INDEF replaced value of -10000 and replace with reasonable values
    center_x, center_y = fits_center.fits_center(mask_fits)
    x0[x0 == -10000] = center_x
    y0[y0 == -10000] = center_y
    ell[ell == -10000] = 0
    pa[pa == -10000] = 0

    # using the isophotes to get the percentage of masked/total
    # i is the index to go through each array value
    # count_in_ellipse is to count the number of pixels being tested
    # count_masked is to count how many pixels in ellipse are masked
    # count_good_isophotes is to count how many of the isophotes pass the test (if enough don't pass, then the mask = bad)
    count_good_isophotes = 0
    width, height = fits_center.fits_size(mask_fits)
    
    row_min_scanned = np.full(height, -1)
    row_max_scanned = np.full(height, -1)

    count_in_ellipse = 0
    count_masked     = 0
    for i in range(len(x0)):

        for y in range(max(0, int(y0 - sma[i] - 2)), min(height, int(y0 + sma[i] + 2))):

            # if row has never been scanned
            if row_max_scanned[y] == -1:
                # scan entire row
                for x in range(0, width):
                    if point_in_ellipse(x0[i], y0[i], ell[i], pa[i], sma[i], x, y):
                        # set min scan index if not set
                        if row_min_scanned[y] == -1: row_min_scanned[y] = x
                        count_in_ellipse += 1
                    
            else: start_x = row_max_scanned(y) + 1

            for x in range(start_x, width):
                if point_in_ellipse(x0[i], y0[i], ell[i], pa[i], sma[i], x, y):
                    count_in_ellipse += 1
                    row_max_scanned[y] = x
                    if data[y, x] != 0:
                        count_masked += 1
                else:
                    break

            
                    
        print "isophote " + str(i) + ": " + str(count_masked) + " of " + str(count_in_ellipse) + " masked"

        # skip this isophote if there are no pixels in it
        if count_in_ellipse == 0:
            continue
        
        # determine if fraction of masked pixels is satisfactory
        if count_masked / count_in_ellipse <= 0.4:
            print "  good isophote"
            count_good_isophotes += 1
    
    # determine if fraction of good isophotes is satisfactory
    if count_good_isophotes / len(x0) > 0.7:
        sys.exit(0)
    else:
        sys.exit(1)

# test to see if the tested point is in the isophote ellipse                   
def point_in_ellipse(x0, y0, ell, pa, smaj, x, y):

    # prevent division by zero
    if (smaj == 0):
        return x == x0 and y == y0

    # calculate semi-minor axis length
    smin = smaj * (1 - ell)

    # translate everything so that ellipse is centered at the origin
    x -= x0
    y -= y0

    # convert position angle to rotation CCW from x-axis
    angle = 90 + pa

    # check whether point is in rotated ellipse

    return (math.pow(x * math.cos(angle) + y * math.sin(angle), 2) / math.pow(smaj, 2)
          + math.pow(x * math.sin(angle) - y * math.cos(angle), 2) / math.pow(smin, 2)) < 1
